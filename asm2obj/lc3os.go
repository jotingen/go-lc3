// Code generated by go-bindata.
// sources:
// lc3os.asm
// DO NOT EDIT!

package asm2obj

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lc3osAsm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xdb\x69\x6f\xe3\x46\x9a\xc0\xf1\xd7\x12\xa0\xef\x50\x3b\x01\x76\x12\x40\xdd\x2b\xde\xe4\x0a\x58\x80\x67\x47\x13\x5f\x90\xd5\x09\xb0\x07\x0c\x5a\x2a\xb7\x89\x96\x49\x0d\x45\xf9\x98\x4f\xbf\xa8\x22\x75\x50\xfe\x3b\xc1\x00\x93\x7e\xd7\x4f\x1d\x2c\xfe\xaa\xf8\x54\x89\x96\x44\xf7\xef\xf3\xf5\x7c\xf6\x45\xbc\x4e\x26\x93\xc9\x68\x38\x1a\x4e\x45\xf3\x28\xc5\x62\x1e\xde\x88\x67\xb9\x6c\xaa\x5a\x34\xf9\xfd\x5a\x8e\x86\x83\xcf\xd9\xec\xe2\x42\x44\x61\x72\xa7\x4a\x07\x53\xd5\x86\xc3\x06\x87\x4d\x0e\x5b\x1c\xb6\x39\xec\x70\xd8\xe5\xb0\xc7\x61\x9f\xc3\x01\x87\x43\x0e\x47\x1c\x8e\x39\x9c\x70\x38\xe5\x70\x86\x61\x83\xbd\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x38\x7a\xab\xd0\xdd\x97\x74\x11\xab\xb8\x39\xe9\xc7\xaf\xbf\x2e\x74\xd8\xe8\x87\x6f\xbe\x2e\x6e\x75\xdc\xec\xc7\x67\x57\x3a\x6a\xbd\xaf\x7d\x23\x54\x81\xbd\x7f\x06\xfb\x15\x7e\x0e\x2f\xda\xcb\xb0\xbd\xc9\xf6\x26\xdb\x9b\x6c\x6f\xb2\xbd\xc9\xf6\x26\xdb\x9b\x6c\x6f\xb2\xbd\xc9\xf6\x26\xaf\x75\x8b\xd7\xba\xc5\x6b\xdd\xe2\xb5\x6e\xf1\x5a\xb7\x78\xad\x5b\xec\x6d\xb1\xb7\xc5\xde\x16\x7b\x5b\xec\x6d\xb1\xb7\xc5\xde\x16\x7b\x5b\xec\x6d\xb1\xb7\xf5\xde\x5b\xa8\xd5\x68\xbf\x07\x6f\xe3\x2c\x6e\xb3\xb8\xcd\xe2\x36\x8b\xdb\x2c\x6e\xb3\xb8\xcd\xe2\x36\x8b\xdb\x2c\x6e\xb3\xb8\xcd\xe2\x36\x8b\xdb\x2c\x6e\xb3\xb8\xcd\x2b\xdc\xe1\x15\xee\xb0\xb7\xc3\xde\x0e\x7b\x3b\xec\xed\xb0\xb7\xc3\xde\x0e\x7b\x3b\xec\xed\xb0\xb7\xc3\xde\x0e\x7b\x3b\xec\xed\xb0\xb7\xc3\xde\x0e\x7b\xbb\xec\xed\xb2\xb7\xcb\xde\x2e\x7b\xbb\xec\xed\xb2\xb7\xcb\xde\x2e\x7b\xbb\xec\xed\xb2\xb7\xcb\xde\x2e\x7b\xbb\xec\xed\xb2\xb7\xcb\xde\x2e\x7b\x7b\xec\xed\xb1\xb7\xc7\xde\x1e\x7b\x7b\xec\xed\xb1\xb7\xc7\xde\x1e\x7b\x7b\xec\xed\xb1\xb7\xc7\xde\x1e\x7b\x7b\xec\xed\xb1\xb7\xc7\xde\x1e\x7b\xfb\xec\xed\xb3\xb7\xcf\xde\x3e\x7b\xfb\xec\xed\xb3\xb7\xcf\xde\x3e\x7b\xfb\xec\xed\xb3\xb7\xcf\xde\x3e\x7b\xfb\xec\xed\xb3\xb7\xcf\xde\x3e\x7b\x07\xec\x1d\xb0\x77\xc0\xde\x01\x7b\x07\xec\x1d\xb0\x77\xc0\xde\x01\x7b\x07\xec\x1d\xb0\x77\xc0\xde\x01\x7b\x07\xec\x1d\xb0\x77\xc0\xde\x01\x7b\x87\xec\x1d\xb2\x77\xc8\xde\x21\x7b\x87\xec\x1d\xb2\x77\xc8\xde\x21\x7b\x87\xec\x1d\xb2\x77\xc8\xde\x21\x7b\x87\xec\x1d\xb2\x77\xc8\xde\x21\x7b\x47\xec\x1d\xb1\x77\xc4\xde\x11\x7b\x47\xec\x1d\xb1\x77\xc4\xde\x11\x7b\x47\xec\x1d\xb1\x77\xc4\xde\x11\x7b\x47\xec\x1d\xb1\x77\xc4\xde\x11\x7b\xc7\xec\x1d\xb3\x77\xcc\xde\x31\x7b\xc7\xec\x1d\xb3\x77\xcc\xde\x31\x7b\xc7\xec\x1d\xb3\x77\xcc\xde\x31\x7b\xc7\xec\x1d\xb3\x77\xcc\xde\x31\x7b\x27\xec\x9d\xb0\x77\xc2\xde\x09\x7b\x27\xec\x9d\xb0\x77\xc2\xde\x09\x7b\x27\xec\x9d\xb0\x77\xc2\xde\x09\x7b\x27\xec\x9d\xb0\x77\xc2\xde\x09\x7b\xa7\xec\x9d\xb2\x77\xca\xde\x29\x7b\xa7\xec\x9d\xb2\x77\xca\xde\x29\x7b\xa7\xec\x9d\xb2\x77\xca\xde\x29\x7b\xa7\xec\x9d\xb2\x77\xca\xde\x29\x7b\x67\xec\x9d\xb1\x77\xc6\xde\x19\x7b\x67\xec\x9d\xb1\x77\xc6\xde\x19\x7b\x67\xec\x9d\xb1\x77\xc6\xde\x19\x7b\x67\xec\x9d\xb1\x77\xc6\xde\x59\x76\x7c\x51\x5e\x94\x8d\xac\xeb\xdd\xa6\x39\x7b\x5b\x3e\x3d\x96\x6c\x45\x5e\x4b\x51\x56\x8d\x58\xee\xea\x5a\x96\xcd\xfa\x4d\x14\x4f\x9b\xb5\x7c\x92\x65\x23\x57\xa3\xe1\xe1\x4d\xfc\xe1\x4a\xb3\x2b\xfd\x02\xf0\xec\xfd\xfa\x3e\x6a\x60\xd4\xc4\xa8\x85\x51\x1b\xa3\x0e\x46\x5d\x8c\x7a\x18\xf5\x31\x1a\x60\x34\xc4\x68\x84\xd1\x18\xa3\x09\x46\x53\x8c\x66\x14\x35\xd0\xd7\x40\x5f\x03\x7d\x0d\xf4\x35\xd0\xd7\x40\x5f\x03\x7d\x0d\xf4\x35\xd0\xd7\x40\x5f\x03\x7d\x0d\xf4\x35\xd0\xd7\x40\x5f\x03\x7d\x0d\xf4\x35\xd1\xd7\x44\x5f\x13\x7d\xcd\x77\xbe\x42\xb4\xaf\xce\xb1\x36\x0a\x9b\x28\x6c\xa2\xb0\x89\xc2\x26\x0a\x9b\x28\x6c\xa2\xb0\x89\xc2\x26\x0a\x9b\x28\x6c\xa2\xb0\x85\xc2\x16\x0a\x5b\x28\x6c\xe1\x0a\xb6\xd0\xd7\x42\x5f\x0b\x7d\x2d\xf4\xb5\xd0\xd7\x42\x5f\x0b\x7d\x2d\xf4\xb5\xd0\xd7\x42\x5f\x0b\x7d\x2d\xf4\xb5\xd1\xd7\x46\x5f\x1b\x7d\x6d\xf4\xb5\xd1\xd7\x46\x5f\x1b\x7d\x6d\xf4\xb5\xd1\xd7\x46\x5f\x1b\x7d\x6d\xf4\xb5\xd1\xd7\x46\x5f\x1b\x7d\x6d\xf4\x75\xd0\xd7\x41\x5f\x07\x7d\x1d\xf4\x75\xd0\xd7\x41\x5f\x07\x7d\x1d\xf4\x75\xd0\xd7\x41\x5f\x07\x7d\x1d\xf4\x75\xd0\xd7\x41\x5f\x07\x7d\x1d\xf4\x75\xd1\xd7\x45\x5f\x17\x7d\x5d\xf4\x75\xd1\xd7\x45\x5f\x17\x7d\x5d\xf4\x75\xd1\xd7\x45\x5f\x17\x7d\x5d\xf4\x75\xd1\xd7\x45\x5f\x17\x7d\x5d\xf4\xf5\xd0\xd7\x43\x5f\x0f\x7d\x3d\xf4\xf5\xd0\xd7\x43\x5f\x0f\x7d\x3d\xf4\xf5\xd0\xd7\x43\x5f\x0f\x7d\x3d\xf4\xf5\xd0\xd7\x43\x5f\x0f\x7d\x3d\xf4\xf5\xd1\xd7\x47\x5f\x1f\x7d\x7d\xf4\xf5\xd1\xd7\x47\x5f\x1f\x7d\x7d\xf4\xf5\xd1\xd7\x47\x5f\x1f\x7d\x7d\xf4\xf5\xd1\xd7\x47\x5f\x1f\x7d\x7d\xf4\x0d\xd0\x37\x40\xdf\x00\x7d\x03\xf4\x0d\xd0\x37\x40\xdf\x00\x7d\x03\xf4\x0d\xd0\x37\x40\xdf\x00\x7d\x03\xf4\x0d\xd0\x37\x40\xdf\x00\x7d\x03\xf4\x0d\xd1\x37\x44\xdf\x10\x7d\x43\xf4\x0d\xd1\x37\x44\xdf\x10\x7d\x43\xf4\x0d\xd1\x37\x44\xdf\x10\x7d\x43\xf4\x0d\xd1\x37\x44\xdf\x10\x7d\x43\xf4\x8d\xd0\x37\x42\xdf\x08\x7d\x23\xf4\x8d\xd0\x37\x42\xdf\x08\x7d\x23\xf4\x8d\xd0\x37\x42\xdf\x08\x7d\x23\xf4\x8d\xd0\x37\x42\xdf\x08\x7d\x23\xf4\x8d\xd1\x37\x46\xdf\x18\x7d\x63\xf4\x8d\xd1\x37\x46\xdf\x18\x7d\x63\xf4\x8d\xd1\x37\x46\xdf\x18\x7d\x63\xf4\x8d\xd1\x37\x46\xdf\x18\x7d\x63\xf4\x4d\xd0\x37\x41\xdf\x04\x7d\x13\xf4\x4d\xd0\x37\x41\xdf\x04\x7d\x13\xf4\x4d\xd0\x37\x41\xdf\x04\x7d\x13\xf4\x4d\xd0\x37\x41\xdf\x04\x7d\x13\xf4\x4d\xd1\x37\x45\xdf\x14\x7d\x53\xf4\x4d\xd1\x37\x45\xdf\x14\x7d\x53\xf4\x4d\xd1\x37\x45\xdf\x14\x7d\x53\xf4\x4d\xd1\x37\x45\xdf\x14\x7d\x53\xf4\xcd\xd0\x37\x43\xdf\x0c\x7d\x33\xf4\xcd\xd0\x37\x43\xdf\x0c\x7d\x33\xf4\xcd\xd0\x37\x43\xdf\x0c\x7d\x33\xf4\xcd\xd0\x37\x43\xdf\x0c\x7d\xdb\x97\xca\xa3\xe1\x74\x3a\x15\xd7\xb7\x77\xb7\x8b\x70\xbe\x10\x9f\x44\xb5\x91\x75\xde\x14\xe5\x37\xb1\x7d\xdb\x36\xf2\x49\xc8\xb2\xa9\xdf\xc4\xa6\x2a\xca\x46\xfc\x98\xaf\x5f\xf2\xb7\xad\xd8\x36\x79\xdd\x6c\x45\xde\x88\xd7\x89\x39\x99\xfc\x34\x1a\xee\x7b\x18\x0d\x07\xd3\xa9\xd8\xca\x46\x5c\xde\xcc\x47\xc3\xc1\x45\x22\xe6\x93\xb1\xfa\xcf\xdd\xec\x6a\xa6\x8a\x6f\x17\x33\x1d\xba\xbe\xbd\xd3\x55\x8e\x2d\x9a\xe2\x49\xd6\xed\x6b\xec\xe7\x7c\x7d\x6c\xbc\x98\x5d\x42\xe3\xc5\xe5\x6c\xdf\x78\xb9\x96\x79\x2d\x6a\xf9\xad\xd8\x36\xb2\xde\x8e\x86\x83\xf0\x4a\x37\x9d\x4f\xc6\x3f\x4c\xda\x8e\xc4\xdc\x18\x5f\x86\xb7\xbf\xdc\xfd\x3c\x1b\x0c\xa6\xe2\x9b\x6c\xc4\x53\xbe\xfd\x3e\x1a\x0e\xae\xae\x17\xaa\x70\x6e\x88\xfe\xbf\xa9\x28\xca\x67\x59\xb7\xf5\x44\x53\xe9\x36\xaf\xbe\xfe\xda\xfa\xe9\x40\x7e\x89\x6e\xe7\xe7\x91\xe4\x10\x31\x74\x24\x39\xaf\x92\x24\x67\x81\xc5\xd9\xff\x7f\x8d\xcf\x02\x97\xef\x03\xf1\x41\x4f\xcd\x87\xa8\x77\x65\xa9\x26\x6e\xb7\x95\xb5\x58\x56\x2b\x29\x7e\x6c\x65\x6e\xea\xe2\xb9\x58\xcb\x6f\x52\xdc\x17\x8d\x78\xf9\x0f\xf1\xb7\xcb\x9b\x9f\x3a\x5f\x6f\x2c\xbe\xde\xa6\xf3\xbb\xf8\x3a\x49\xef\xc2\x76\x58\x7f\xbb\xbc\x19\xcc\x3d\xd5\x79\x77\x7b\xdd\xea\x79\xcd\xd2\xc9\x44\xe9\x7d\x97\x6f\xf7\x55\x5e\xaf\xd4\x85\x9b\xdd\xf6\x40\xdf\x35\x48\x4e\x1b\x98\xbd\x06\xab\xbc\xc9\xfb\xd5\x93\x5e\xf7\xb6\xaa\xbd\x2a\xb6\x9b\x75\xfe\x86\xbd\x27\xbd\xce\xdd\xd3\xea\xef\xfb\x5e\x9c\xd6\xf5\x55\xdd\x76\x8d\xf5\x2b\x5d\xce\xf6\x7f\x0a\x51\xd5\xc2\xb3\x45\xd0\x5f\x95\xfd\xa6\x97\x37\x27\x17\x30\xf4\x9d\x3e\xc9\xa7\x4a\x3d\x2f\x75\xd5\xc8\x65\x53\x54\x65\xbf\xc5\xaf\xf1\x69\x0b\x7d\xb7\xcf\xc5\x4a\x56\x62\x59\x95\x4d\x5d\x9d\xf7\x7f\x52\x3b\xcb\x52\xdd\x7f\xbe\x7c\x2c\x4a\xf9\x51\xfd\xf8\xa4\x7e\xd6\xab\xff\xb6\x5c\xab\x56\xbb\x52\x57\x6e\x9f\xd8\xf0\xd7\xf4\x6e\x3e\xe9\xfe\x18\x14\x5d\xfc\xf2\x9b\x30\x4e\x0a\x8c\x8f\x0a\xcc\x8f\x0a\xac\x8f\x0a\xec\x8f\x0a\x9c\x8f\x0a\xdc\x8f\x0a\xbc\xb3\x82\xb3\xa7\x56\x0c\x46\xc3\xee\x39\x17\xfd\xbf\x73\xbd\x7a\x99\xca\x79\x17\xd7\xbf\xdd\xf9\x77\xd1\x6c\x71\xdb\x2b\x9c\x4c\x54\xe1\x3e\xd5\xf4\x5b\xfe\x60\x4f\x46\xc3\xe9\x3e\x87\xf5\x84\xa7\xdd\xd3\x96\x97\x22\x5f\x2e\xe5\x76\x2b\xe4\xb3\xac\xdf\x9a\xc7\xa2\xfc\x36\x1a\x9e\x37\x99\x64\x99\x0f\x4d\x5e\xad\xc9\x64\xa2\x32\xcc\xeb\xfd\xc3\xc3\xc3\x68\xd8\x7f\x20\xf7\x8d\x55\xa5\x43\x63\xf5\x74\x9f\x64\x61\xab\xfb\x31\xcd\xf1\xfb\xfd\x2a\xad\x7f\x49\x17\xb1\xf8\x24\xe6\x32\x5f\x89\x5c\x6c\x8b\xf2\x9b\x5a\x02\x8f\x79\x9d\x2f\x1b\x59\x8b\xea\x41\x14\xe5\x66\xd7\x88\x87\xba\x7a\x3a\x79\x44\xe5\x73\xb1\xd4\x7f\x68\xac\xc4\x7c\xd2\xf6\x14\xeb\x3c\xa2\x52\xc1\xff\x18\xce\xff\x89\x97\x47\x59\x8a\x65\xbe\x69\x76\xb5\x5c\x8d\x86\x8b\xfd\x4f\x18\x74\x82\x52\x39\xef\xb8\x86\x06\x53\xb1\xcd\x9f\xa5\x98\x1b\x5d\xa1\x79\x2c\x34\x0f\x85\xa6\x1a\xfc\xa1\x9b\xbb\xdf\x42\x9d\xed\x2f\x92\x59\xd7\x99\x4e\x42\x83\xa9\x78\xc9\x8b\x46\x3c\x54\xb5\xc8\xd5\x78\xb7\x4d\x5d\x7d\x97\xa3\xe1\x20\x9a\xff\x63\x23\xce\x9b\xef\x3b\x98\x8c\xf7\x49\x69\x30\x15\xb5\xb2\x28\x9a\xae\x54\xa8\xe1\xf0\xae\xa0\x77\x10\xb5\x2b\x8c\xf7\xcb\x7d\x9f\x10\xf4\x76\x50\xed\x9a\x03\xc7\x31\xd5\x9f\x8e\xb4\x2e\x1a\xa9\xff\x62\x5b\xca\x17\xd1\xee\x11\x5d\xca\x3d\x13\xa8\xe5\xb6\xa9\xea\x16\x41\x97\x9f\xf1\x1d\xca\x95\xe0\x3c\x5d\xbc\x9f\xe7\xeb\xaf\x6a\xe7\xfe\xed\x70\xc5\xe3\x14\x17\xa5\x98\xeb\x95\xa5\xc3\x55\xb9\xad\xd6\xf2\xf3\xe9\x94\x26\xbd\x19\x3d\xb4\x53\x4c\x6f\xdd\x8c\x5c\x7f\x5d\xfc\x0b\xe6\xf5\xfa\xeb\xe2\xfd\xb4\x26\x67\xb3\xaa\x46\xb9\xcf\xe6\x4d\x25\xee\xe5\x7e\x20\x27\x33\x7c\xec\xe8\xb8\x1d\x76\xfb\x42\x8f\xfd\x70\x33\xff\x92\xb9\x4e\x60\xaa\x13\x9a\xe9\xe4\xcf\x99\xe8\xfe\x84\xdf\x7c\x5d\xdc\x1e\x66\x3c\x17\x57\x5f\x2f\x3e\x35\xb2\x7e\x2a\xca\xbc\x91\x6a\x53\xae\xd5\x31\xa0\x7a\x38\x1a\x6c\xcf\xd6\xc0\xb8\xed\x47\x67\x10\x55\x57\x67\x00\x55\x9e\xaf\x56\xb5\x4a\x49\x7a\xe1\x7c\x1e\x74\x93\xa7\xae\xd7\x4d\xf3\xe4\x38\xe6\xc9\x61\x9a\x27\x63\x7d\xd0\xc9\xcb\x95\x50\xe7\x86\x77\x8b\xa5\x0b\x79\xc7\x90\xaa\x15\x26\x2d\xbb\x3a\xa4\xe9\xad\xaa\x7a\x96\xfb\xc1\xeb\xf3\xa6\xac\xc5\x8f\xf3\xc9\x4f\x5d\x2a\x32\x0e\x6b\x49\x0d\xe7\xee\xe2\xfa\xfa\x46\x3b\xce\xf5\x49\xcf\xe8\x3a\x69\x67\xe3\xe4\xc6\x8b\x72\xdf\xe7\x4e\x65\x40\xd1\x2e\xe7\x68\xfe\x8f\xe3\x8f\xa3\xee\x92\xeb\x2b\x75\x46\x6e\x8b\xf6\xc3\x32\xc6\x3f\x18\xba\x66\xb9\x5f\x7a\x27\xd7\x3d\x1d\x49\xd7\xba\x3d\xad\xf6\x74\x0e\x33\x7a\x0e\x74\x3e\xfb\x87\xc3\x58\x0f\xa8\x5b\x03\x6a\xa6\x66\x57\xe2\x93\x3a\x54\x3c\x6d\x1a\x3d\x4f\x7a\x17\x68\x13\xe1\xbb\xbc\xae\x93\xfa\x58\xbc\x3c\x16\xcb\x47\x51\xa8\xd3\x7a\xa5\xd3\xb4\xea\xa7\x4d\x08\x6a\x1c\xf9\x7a\x5b\x09\xb9\x7c\xac\xe4\xea\x3c\x41\x1c\x17\xdb\xa2\xfd\x55\x19\xcc\xdf\x61\xee\x3d\xf1\x63\x59\x89\x52\xb6\xdd\x1c\xd6\xc3\xb6\x28\x97\x52\xbc\x48\x31\x1a\x0e\x06\x6a\x62\x84\x10\xd5\xb3\xac\xdb\xf9\x59\xe7\xfa\xc1\x1c\x5c\xa4\xa1\xaa\xdd\x5d\xe6\xee\xf2\xf6\xcb\x60\xba\xbf\x4d\x75\x77\xfa\x56\x46\xc3\x41\xb7\x00\xf5\xcf\xe4\x0e\x69\x3c\x3f\x7d\xc6\xd5\xe4\xe9\x22\x75\x4b\xe2\x3e\x5f\xea\x23\xfb\x53\x55\x16\x4d\x55\xff\xce\xda\x3d\x4b\x15\xbd\x4f\x0e\xc7\xf5\x94\x8b\x75\x51\xca\x07\x29\x57\x63\xd1\x54\xd5\x7e\x95\xb4\xf5\xf4\xb7\x3a\xda\xb5\xf3\x3b\x6b\xe0\xfc\x42\xe7\xf3\x7d\xba\x5c\xba\xc9\x3f\x7f\xf8\xf7\x27\xd2\xc7\x62\x2b\x56\x95\xdc\x96\x7f\x6d\xc4\x4b\x55\x7f\x1f\x8b\x7b\xb9\xcc\x77\x5b\x79\xfc\x44\xd7\xfe\xe6\xef\x9f\x4a\x11\x63\xb1\xc9\x97\xdf\xe5\x4a\x98\x62\xa3\x46\xa8\xba\xe9\x4e\xb3\xeb\x6a\x99\xab\xb3\xec\xf8\x3c\x8d\xfc\x61\x06\x39\x79\x4e\xd4\xd3\x3a\x15\x57\xd7\x8b\xf4\x3f\xc5\x42\xdd\x42\x53\xe7\x1b\xf1\x52\xac\xd7\x42\x96\xab\x76\x07\x2a\x1a\xb1\x95\x72\x2b\xf2\xf2\x4d\x0d\x79\xac\x4e\x53\xa5\x28\x4a\xdd\xb4\x1b\xde\x43\x55\x3f\x8d\xc5\x4a\x6e\x37\xfb\xbc\x7b\xf3\xef\x37\x62\x2b\x97\x55\xb9\x12\x72\x55\xa8\x81\xfe\x55\x7d\x6a\xf8\xfb\xae\xa8\xf5\x77\x9e\x74\xeb\xea\x41\xe4\x62\x55\xed\xee\xd7\x52\x75\xfd\xb9\xdb\x3f\x7e\x3f\xa3\xcd\xcd\xb1\x98\x5b\x7f\x9c\xd9\x4e\x33\x7d\x17\xb2\x8e\x21\xeb\x4f\xc8\x7f\x37\xbd\x04\x68\x1e\x13\xa0\x7e\x34\xda\xdd\xe8\xb5\x11\xcd\x4b\x75\x32\xc5\x87\x15\x7a\x3c\x04\xb7\x27\xca\xde\x67\xdc\x75\xf5\x22\xee\xdf\x1a\xd9\x7b\x1a\xe6\xfa\xd3\x4d\xf1\x70\x28\x55\x99\x45\x4f\xd1\xdf\x77\x45\x23\x36\x75\x51\x36\xfa\xcc\xdb\x4f\xad\x37\x27\xb9\x55\x3f\x9e\x55\xf3\x28\xeb\x97\x62\x2b\xdb\x26\x7a\xa4\xc7\x0b\xc2\x03\xb8\x7d\x2c\x1e\x1a\xf1\x58\x7c\x7b\xec\x2e\xbb\x3f\x97\xb6\x7e\x96\xae\xe9\xf7\x64\x0e\x9b\xc3\xf1\x21\x9d\x9f\xf4\x35\x9f\x88\xb5\x7c\x68\xf6\xe5\xe6\x78\x6e\x9e\xce\xc0\xe5\x6d\xd4\xae\xe6\xb9\x79\x72\xb1\xe3\x01\xa4\xbd\xc6\xe5\x6d\x74\x37\x39\xcb\x03\xbd\x41\xf4\x2a\xe8\x6b\xb4\x84\xdd\x18\xcc\xde\x18\xac\xf1\xdc\x1a\xff\xf0\xa9\xdd\x6f\x7a\xd7\x39\x6e\x38\xa7\x97\x9a\x74\x93\x71\xc2\xf2\x27\xcd\xc6\xc9\x66\xa8\x1a\xa8\x07\xe1\xbb\x94\x1b\xf1\xad\xda\xf7\x5f\xf6\x61\xde\xed\x8f\x37\xff\xc4\x06\xf9\xee\x79\xfb\x60\xa3\x3c\x7b\xde\x2e\x92\x77\xcf\xdb\xc7\xdb\x69\xff\x28\xf5\x73\x78\xa1\x0e\xcf\x3a\x17\x3d\xe6\xe5\x6a\xdd\xed\xab\x8f\xf9\x5a\xe7\xb5\xee\xf3\x73\x77\x3f\xfa\x97\xd2\xbd\x0f\x16\xea\x23\xfa\xe0\x30\xd0\xf3\x4f\x9e\x2a\x5d\x77\x6f\xa7\x76\xa5\x7e\xfb\x52\x94\xa2\x7d\x93\x73\xf2\x68\x19\xbd\x93\xac\xee\x71\xaa\x07\xf0\x6f\x07\xe0\xfd\xfb\xb5\x41\x87\x96\xeb\xf7\x52\xdd\xd0\xce\xef\x29\xea\xbe\x3b\x2a\x3e\xb5\x1f\x14\x9b\x4a\xc8\x57\xb9\xdc\x35\x52\xdf\xda\xae\x5c\xc9\x87\xa2\x54\x1b\x76\x9d\x6f\x46\xc3\x7d\xf5\xfe\x6c\xea\x5b\x55\xfb\x69\xd7\x52\xfd\xff\xb8\xbf\x74\x2f\x12\xff\xf0\x0a\x87\x2f\xa5\x7e\x16\x8b\x47\x59\x4b\xf1\x52\xa9\x5d\xab\xed\x24\x5f\x36\xbb\x7c\xbd\x7e\x53\x07\x7d\x95\xf1\x8f\xdf\x60\x1d\x8b\x6d\xd5\xee\x73\x7a\x7f\x28\xd5\x87\xea\x63\x75\x95\xa4\x96\xf9\x7a\x2d\x57\x9f\xdb\xd1\xcf\xae\x16\x83\xc1\x7c\x31\x3b\xac\xbb\xee\x2c\xf1\xf9\x76\x31\x9f\x5d\x7d\xf9\x6f\xf1\x97\xff\x2d\x67\xfa\xa3\xee\xc9\x99\xe1\xbf\xc4\x5f\x46\xc3\xff\x0f\x00\x00\xff\xff\x09\x21\x42\x60\x95\x42\x00\x00")

func lc3osAsmBytes() ([]byte, error) {
	return bindataRead(
		_lc3osAsm,
		"lc3os.asm",
	)
}

func lc3osAsm() (*asset, error) {
	bytes, err := lc3osAsmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lc3os.asm", size: 17045, mode: os.FileMode(438), modTime: time.Unix(1529459825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lc3os.asm": lc3osAsm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lc3os.asm": &bintree{lc3osAsm, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

