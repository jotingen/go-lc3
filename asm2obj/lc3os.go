// Code generated by go-bindata.
// sources:
// lc3os.asm
// DO NOT EDIT!

package asm2obj

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lc3osAsm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xdb\xd9\x6f\xe3\x48\x7e\xc0\xf1\x67\x09\xd0\xff\x50\xd9\x01\xb2\x33\x80\xba\x23\xde\x64\x04\x04\xe0\xd9\xa3\x1d\x5f\xa0\xd5\x19\x20\x08\x20\xd0\x52\xb9\x45\xb4\x4c\x7a\x49\xaa\x6d\xef\x5f\xbf\x28\x92\x3a\x28\x7f\xbd\x83\x7d\x18\xbf\xf9\x57\x07\xab\x3e\x75\xea\x12\xfd\xdf\xe7\xdb\x74\xf1\x45\xbc\xce\x66\xb3\xd9\x64\x3c\x19\xcf\x45\xb3\x95\x62\x99\xfa\x77\xe2\x87\x5c\x37\x65\x25\x9a\xec\x61\x27\x27\xe3\xd1\xe7\x64\x71\x75\x25\x02\x3f\x5a\xa9\xd4\xd1\x5c\x95\xe1\xb0\xc6\x61\x9d\xc3\x06\x87\x4d\x0e\x5b\x1c\xb6\x39\xec\x70\xd8\xe5\xb0\xc7\x61\x9f\xc3\x01\x87\x43\x0e\x47\x1c\x8e\x39\x9c\x60\x58\x63\x6f\x8d\xbd\x35\xf6\xd6\xd8\x5b\x63\x6f\x8d\xbd\x35\xf6\xd6\xd8\x5b\x63\x6f\x8d\xbd\x35\xf6\xd6\xd8\x5b\x63\x6f\x8d\xbd\x35\xf6\xd6\x4e\xde\x2a\xb4\xfa\x12\x2f\x43\x15\xd7\x67\xc3\xf8\xed\xd7\x65\x1b\xd6\x86\xe1\xbb\xaf\xcb\xfb\x36\xae\x0f\xe3\x8b\x9b\x36\x6a\xbc\xcf\x7d\x27\x54\x82\x79\x58\x83\xc3\x0c\xbf\xfa\x57\xdd\x63\xd8\x5e\x67\x7b\x9d\xed\x75\xb6\xd7\xd9\x5e\x67\x7b\x9d\xed\x75\xb6\xd7\xd9\x5e\x67\x7b\x9d\xe7\xba\xc1\x73\xdd\xe0\xb9\x6e\xf0\x5c\x37\x78\xae\x1b\x3c\xd7\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x78\xef\x2d\xd4\x6c\x34\xdf\x83\x77\x71\x16\x37\x59\xdc\x64\x71\x93\xc5\x4d\x16\x37\x59\xdc\x64\x71\x93\xc5\x4d\x16\x37\x59\xdc\x64\x71\x93\xc5\x4d\x16\x37\x59\xdc\xe4\x19\x6e\xf1\x0c\xb7\xd8\xdb\x62\x6f\x8b\xbd\x2d\xf6\xb6\xd8\xdb\x62\x6f\x8b\xbd\x2d\xf6\xb6\xd8\xdb\x62\x6f\x8b\xbd\x2d\xf6\xb6\xd8\xdb\x62\x6f\x8b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x84\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x84\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x84\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x24\x39\xbd\x51\x9e\x17\x8d\xac\xaa\xfd\x73\x73\xf1\x6e\xf9\xfc\x94\x52\x8b\xac\x92\xa2\x28\x1b\xb1\xde\x57\x95\x2c\x9a\xdd\x9b\xc8\x9f\x9e\x77\xf2\x49\x16\x8d\xdc\x4c\xc6\xc7\x77\xe2\x8f\x4f\x5a\xdc\xb4\x6f\x00\x5e\xbc\xbf\x7e\x88\x6a\x18\xd5\x31\x6a\x60\xd4\xc4\xa8\x85\x51\x1b\xa3\x0e\x46\x5d\x8c\x7a\x18\xf5\x31\x1a\x60\x34\xc4\x68\x84\xd1\x18\xa3\x09\x45\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x75\xf4\xd5\xd1\x57\x47\x5f\xfd\x9d\xaf\x10\xdd\x5b\xe7\x98\x1b\x85\x75\x14\xd6\x51\x58\x47\x61\x1d\x85\x75\x14\xd6\x51\x58\x47\x61\x1d\x85\x75\x14\xd6\x51\xd8\x40\x61\x03\x85\x0d\x14\x36\x70\x06\x1b\xe8\x6b\xa0\xaf\x81\xbe\x06\xfa\x1a\xe8\x6b\xa0\xaf\x81\xbe\x06\xfa\x1a\xe8\x6b\xa0\xaf\x81\xbe\x06\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\x09\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\x09\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\x09\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\xdd\x9b\xca\x93\xf1\x7c\x3e\x17\xb7\xf7\xab\xfb\xa5\x9f\x2e\xc5\x27\x51\x3e\xcb\x2a\x6b\xf2\xe2\x9b\xa8\xdf\xea\x46\x3e\x09\x59\x34\xd5\x9b\x78\x2e\xf3\xa2\x11\x3f\x67\xbb\x97\xec\xad\x16\x75\x93\x55\x4d\x2d\xb2\x46\xbc\xce\xf4\xd9\xec\x97\xc9\xf8\x50\xc3\x64\x3c\x9a\xcf\x45\x2d\x1b\x71\x7d\x97\x4e\xc6\xa3\xab\x48\xa4\xb3\xa9\xfa\x67\xb5\xb8\x59\xa8\xe4\xfb\xe5\xa2\x0d\xdd\xde\xaf\xda\x2c\xa7\x12\x4d\xfe\x24\xab\xee\x6d\xec\x1f\xd9\xee\x54\x78\xb9\xb8\x86\xc2\xcb\xeb\xc5\xb1\xb0\x6a\x8e\xa8\xf6\x45\xa1\xda\xbd\xaf\x65\x25\xd6\xe5\x46\x8a\x9f\xd7\x3b\x99\x55\xe2\xae\xca\x7f\xe4\x3b\xf9\x4d\x8a\x87\xbc\x11\x2f\xff\x25\xfe\x76\x7d\xf7\x4b\x5f\xbd\x33\x15\x5f\xef\xe3\x74\x15\xde\x46\xf1\xca\x8f\x22\xd5\xe6\xbf\x5d\xdf\x8d\x52\x47\x55\x7e\x7b\xbf\xfa\x2d\xb8\x4f\x7b\xbc\xd7\x24\x9e\xcd\x46\xa3\xb9\xf8\x2e\xdf\x1e\xca\xac\xda\xa8\x07\x37\xfb\x5a\x54\xf2\x5b\x5e\x37\xb2\xea\x0b\x44\xe7\x05\xf4\x41\x81\x4d\xd6\x64\xc3\xec\xd1\xa0\x7a\x53\xe5\xde\xe4\xf5\xf3\x2e\x7b\xc3\xda\xa3\x41\xe5\xf6\x79\xf6\xf7\x75\x2f\xcf\xf3\xba\x2a\x6f\x47\x3c\xcc\x74\xbd\x38\x7c\x12\xa0\xb2\xf9\xe2\xfc\x6f\x7e\x31\x28\xc3\xa2\xd7\x77\x67\x0f\xd0\xda\x9e\x3e\xc9\xa7\x52\x4d\x97\xaa\x6c\xe4\xba\xc9\xcb\xe2\xa2\x44\x78\x2a\x91\x24\x71\x5b\x22\x5b\x6f\xf3\x42\x8a\x75\x59\x34\x55\x79\xfe\x84\x6e\x56\xf9\xff\x1b\xaf\xd2\x59\xff\x81\x45\x70\xf5\xdb\xef\x42\x3b\x4b\xd0\x3e\x4a\xd0\x3f\x4a\x30\x3e\x4a\x30\x3f\x4a\xb0\x3e\x4a\xb0\x3f\x4a\x70\xde\x27\xdc\x7e\x5d\x9e\x9a\x7c\x9e\xb0\xb8\x39\x2b\x74\x4c\x10\x17\x7f\xa3\xc9\xf8\xda\xbf\xff\x6d\xf5\xeb\x42\x0c\x3f\xbd\x79\x75\x12\xb5\x92\xaf\x6e\x7f\x5f\xb9\xab\x60\xb1\xbc\x1f\x24\xce\x66\x2a\xf1\xb0\x80\x86\x25\x7f\x32\x67\x93\xf1\xfc\xb0\x32\xcf\x86\x25\x19\xcd\xfb\x45\x94\x15\x22\x5b\xaf\x65\x5d\x0b\xf9\x43\x56\x6f\xcd\x36\x2f\xbe\x4d\xc6\x97\x45\x66\x49\xe2\x42\x91\x57\x63\x36\x9b\x89\xa6\x14\xaf\x0f\x8f\x8f\x8f\x93\xf1\x70\x9d\x1d\x0a\xab\x4c\xc7\xc2\x6a\xd1\x9e\xed\x2d\x46\xff\x13\x91\xd3\xb7\xd6\xd5\x66\xf5\x25\x5e\x86\xe2\x93\x48\x65\xb6\x11\x99\xa8\xf3\xe2\xdb\x4e\x8a\xf5\x36\xab\xb2\x75\x23\x2b\x51\x3e\x8a\xbc\x78\xde\x37\xe2\xb1\x2a\x9f\xce\x56\x9e\xfc\x91\xaf\xdb\x8f\xcf\x4a\x91\xce\x26\xe3\xe5\xe1\x6b\xf7\xed\x46\xd0\xee\x2a\x87\xd5\x3e\x9a\x8b\x97\x2c\x6f\xc4\x63\x59\x89\x4c\xd5\x50\x37\x55\xf9\x5d\x4e\xc6\xa3\x20\xfd\xc7\xb3\xf8\xa8\x64\xd4\x96\xac\x54\xb3\xf2\x46\x64\xc5\x46\x54\xb2\xd9\x57\xc5\x64\x3c\x4a\xe3\xe5\xfb\x7e\xdc\x7e\x55\xfb\xed\xef\x55\xde\xc8\xf6\x93\xbd\x53\x17\xf2\x42\xa4\xad\x5c\x1b\x2e\x8b\xba\xdc\xc9\xcf\x7d\x93\x6f\xbf\x76\xfb\xa0\x48\xb5\xe9\x70\x5a\x8d\xe6\xa2\xce\x7e\x48\x91\x6a\xa7\xac\xab\xdf\xfd\x76\xdf\x6c\xdb\xd9\x16\x88\x2e\x3a\xa8\x1e\x71\xd8\x41\x9a\x52\x3c\xc8\xb6\x07\x6f\x83\xce\x9e\x55\xd4\x6f\xc0\xfd\x4e\xa4\x2a\x82\xf6\x0f\xfa\xae\x76\x59\x68\x6a\x25\xeb\xa6\xac\xba\xd6\x5e\xfa\x0c\x9d\xee\xbe\x2e\xef\x8f\x50\x99\xb8\xf9\x7a\xf5\xa9\x91\xd5\x53\x5e\x64\x8d\x54\x5b\x70\xa5\x36\xfd\xf2\xf1\xf4\xfc\xfa\x82\x6e\xda\xd5\xd3\x4e\x2c\x95\xb7\x9d\x18\x2a\x3d\xdb\x6c\x2a\x35\x53\x5b\xef\xcf\xa3\x9e\x4d\x3d\xaf\x27\x6e\x3b\xda\xef\x40\x47\xde\xd9\x54\x75\xa8\xed\xa4\x3a\x25\x4e\x63\xd1\x77\xae\x0f\x39\xa7\x90\xca\xe5\x47\xad\x43\x3a\x9b\xfe\xd4\x9e\x21\x4f\xe5\x0f\x79\x68\x7c\x7b\xb8\xca\x4a\xfc\x9c\xce\x7e\xe9\x67\xa8\xa6\x3c\x8e\xcd\x59\x5d\xdd\xde\xde\xb5\x96\xa9\x7a\x7e\xaa\xf5\x95\x74\xf8\x67\x1d\xcf\x8b\x43\x9d\x7b\xb5\x30\x44\x37\x5b\x82\xf4\x1f\xa7\x5f\x82\xac\xa2\xdb\x1b\x75\x21\xe8\x92\x0e\xcd\xd2\xa6\x3f\x69\x6d\xce\xe2\x30\xe8\x67\xcf\x3d\x6f\x49\x5f\xba\x3b\x9a\x07\x3a\xc7\x11\xbd\x04\x3a\xce\x80\x13\x50\x77\xf4\x0e\x80\xfa\x39\xa0\x46\x6a\x71\x23\x3e\xa9\x23\xe4\xe9\xb9\x69\xc7\xa9\xdd\x1c\xba\xd5\xf8\x6e\xb9\xb7\x6b\x7d\x2a\x5e\xb6\xf9\x7a\x2b\x72\x75\x35\x29\x2b\xb9\xe9\xea\xe9\xd6\x91\x6a\x47\xb6\xab\x4b\x21\xd7\xdb\x52\x6e\x2e\xd7\xd5\x69\xb2\x2d\xbb\x9f\xd0\x9c\x8f\xdf\x69\x73\x3e\x0e\xbf\x23\x7e\x2e\x4a\x51\xc8\xae\xa6\xe3\x94\xa8\xf3\x62\x2d\xc5\x8b\x14\x93\xf1\x68\xa4\xc6\x46\x08\x51\xfe\x90\x55\x37\x44\xbb\xac\x3d\xd1\x46\x57\xb1\xaf\x72\xf7\x4f\x5a\x5d\xdf\x7f\x19\xcd\x0f\x3d\x55\x1d\x6c\x7b\x33\x19\x8f\xfa\x39\xd8\xfe\x2c\xe8\xb8\xab\x64\xa7\x6e\x77\xe3\xd7\x26\xa9\x5e\x89\x87\x6c\xfd\x5d\x35\xe7\xa9\x2c\xf2\xa6\xac\xfe\xc5\xf4\x1d\xac\x54\x35\x01\x6e\xda\x91\x3c\xce\xcb\x97\x7e\x99\xed\xf2\x42\x3e\x4a\xb9\x99\x8a\xa6\x2c\x0f\x13\xa5\xcb\xd7\x7e\x8a\xdd\x4d\x9f\x7f\x31\x0d\x2e\x1f\x74\x1c\xf2\x81\xe9\x71\xd2\xf4\x53\xe0\x72\x0b\x38\xdc\x42\xb6\x79\x2d\x36\xa5\xac\x8b\xbf\x36\xe2\xa5\xac\xbe\x4f\xc5\x83\x5c\x67\xfb\x5a\x9e\x2e\xb1\xdd\xcf\x9c\xfe\xad\x8d\x62\x2a\x9e\xb3\xf5\x77\xb9\x11\xba\x78\x56\x8d\x54\xd5\xf4\x37\x98\x5d\xb9\xce\xd4\xfd\x65\x7a\xb9\x99\xfc\xe1\x3e\x72\xb6\x5a\xd4\x9a\x9d\x8b\x9b\xdb\x65\xfc\xdf\x62\xa9\xba\xd0\x54\xd9\xb3\x78\xc9\x77\x3b\x21\x8b\x8d\x78\xd9\xca\x42\x9d\x15\xb5\x94\xb5\xc8\x8a\x37\xd5\xe4\xa9\x3a\x6a\x0b\x91\x17\x6d\xd1\xbe\x79\x8f\x65\xf5\x34\x15\x1b\x59\x3f\x1f\x36\xdb\xbb\xff\xbc\x13\xb5\x5c\x97\xc5\x46\xc8\x4d\xae\x1a\xfa\x57\x75\x53\xfc\xfb\x3e\xaf\xda\xaf\x79\xb4\xa5\xcb\x47\x91\x89\x4d\xb9\x7f\xd8\x49\x55\xf5\xe7\xf6\xbe\xfc\x47\xfb\x5a\xaa\x4f\x45\x6a\xfc\xf1\xfe\xa6\x9f\x42\x7a\x1f\x32\x4e\x21\xe3\x4f\xd8\x05\xef\x06\xdb\xa0\x7e\xda\x06\xdb\xd5\xa1\x54\x0a\xf9\xda\x88\xe6\xa5\x3c\x1b\xe2\xe3\x24\x3d\xdd\x90\xba\xeb\x86\x78\xca\xea\x76\xcd\x7c\x93\x8d\xd8\x95\x2f\xe2\xe1\xad\x91\x83\x05\x91\xb6\x37\xda\xfc\xf1\x98\xaa\xf6\x97\x76\x88\xfe\xbe\xcf\x1b\xf1\x5c\xe5\x45\xd3\x5e\x88\x86\x1b\xec\xdd\xd9\x0e\xdb\xae\xd0\xb2\xd9\xca\xea\x25\xaf\x65\x57\xa4\x6d\xe9\xe9\x81\xb0\x06\xeb\x6d\xfe\xd8\x88\x6d\xfe\x6d\xdb\x3f\xf6\x70\x69\xe9\xfc\x8c\x36\xa7\x3b\x90\x39\x1e\x11\xa7\x75\x9a\x9e\xd5\x95\xce\xc4\x4e\x3e\x36\x87\x74\x7d\x9a\xea\xe7\x23\x70\x7d\x1f\x74\xb3\x39\xd5\xcf\x1e\x76\xba\x00\x74\xcf\xb8\xbe\x0f\x56\xb3\x8b\xad\x60\xd0\x88\x41\x86\xf6\x19\x1d\x61\xdf\x06\x7d\xd0\x06\x63\x9a\x1a\xd3\x9f\x3e\x75\xa7\xce\xe0\x39\xa7\x63\xe7\xfc\x51\xb3\x7e\x30\xce\x58\xfe\xa4\xd1\x38\x3b\x12\x55\x01\xb5\x10\xbe\x4b\xf9\x2c\xbe\x95\x87\xfa\x8b\x21\xcc\xbb\x53\xf2\xee\xdf\x38\x26\xdf\xad\xb7\x0f\x8e\xcb\x8b\xf5\x76\x15\xbd\x5b\x6f\x1f\x1f\xaa\xc3\x0b\xd5\xaf\xfe\x95\xba\x79\xb6\x7b\xd1\x36\x2b\x36\xbb\xfe\x74\xdd\x66\xbb\x76\x5f\xeb\x5f\x91\xf5\xfd\x69\x7f\x1c\x3a\xb8\xea\xaa\x17\x71\xa3\x63\x43\x2f\x5f\x96\xa8\xed\xba\x7b\xdd\x5d\xed\x8b\xf6\x15\x77\x5e\x88\xeb\x30\x1d\x2e\x2d\x6d\x70\x97\x6c\x6b\x9c\xb7\x0d\xf8\x8f\x23\xf0\xe1\x2d\x85\x51\x8f\xa6\x5e\xe3\x1f\x9b\x76\xd9\xa7\xa0\xff\xba\x9c\xf8\xd4\xbd\x8a\x68\x4a\x21\x5f\xe5\x7a\xdf\xc8\xb6\x6b\xfb\x62\x23\x1f\xf3\x42\x9d\xd9\x55\xf6\x3c\x19\x1f\xb2\x0f\x47\xb3\xed\xaa\x3a\x52\xfb\x92\xea\xff\xd3\xf9\xd2\xbf\x77\xf2\x87\x4f\x38\x7e\x0f\xef\xb3\x58\x6e\x65\x25\xc5\x4b\xa9\x4e\xad\xae\x92\x6c\xdd\xec\xb3\xdd\xee\x4d\x5d\xb4\xd5\x8e\x7f\xfa\xd2\xde\x54\xd4\x65\x77\xce\xb5\xe7\x43\xa1\x5e\x71\x9d\xb2\xab\x4d\x6a\x9d\xed\x76\x72\xf3\xb9\x6b\xfd\xe2\x66\x39\x1a\xa5\xcb\xc5\x71\xde\xf5\xd7\x89\xcf\xf7\xcb\x74\x71\xf3\xe5\xff\xc4\x5f\xfe\xbf\x58\xb4\xaf\x83\xce\xae\x0d\xff\x23\xfe\x32\x19\xff\x33\x00\x00\xff\xff\xca\x59\x87\xd5\x88\x3f\x00\x00")

func lc3osAsmBytes() ([]byte, error) {
	return bindataRead(
		_lc3osAsm,
		"lc3os.asm",
	)
}

func lc3osAsm() (*asset, error) {
	bytes, err := lc3osAsmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lc3os.asm", size: 16264, mode: os.FileMode(438), modTime: time.Unix(1528641231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lc3os.asm": lc3osAsm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lc3os.asm": &bintree{lc3osAsm, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

