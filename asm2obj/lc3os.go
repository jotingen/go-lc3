// Code generated by go-bindata.
// sources:
// lc3os.asm
// DO NOT EDIT!

package asm2obj

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lc3osAsm = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xdb\xd9\x6f\xe3\x48\x7e\xc0\xf1\x67\x09\xd0\xff\x50\xd9\x01\xb2\x33\x80\xba\x23\xde\x64\x04\x04\xe0\xd9\xa3\x1d\x5f\xa0\xd5\x3b\x40\x10\x40\xa0\xa5\x72\x8b\x68\x99\xf4\x92\x94\xdd\xde\xbf\x3e\x28\x92\x3a\x28\x7f\xbd\x83\x7d\x18\xbf\xf9\x57\x07\xab\x3e\x75\xea\x12\xfd\xdf\xe7\xdb\x74\xf1\x45\xfc\x98\xcd\x66\xb3\xc9\x78\x32\x9e\x8b\x66\x2b\xc5\x32\xf5\xef\xc4\x8b\x5c\x37\x65\x25\x9a\xec\x61\x27\x27\xe3\xd1\xe7\x64\x71\x75\x25\x02\x3f\x5a\xa9\xd4\xd1\x5c\x95\xe1\xb0\xc6\x61\x9d\xc3\x06\x87\x4d\x0e\x5b\x1c\xb6\x39\xec\x70\xd8\xe5\xb0\xc7\x61\x9f\xc3\x01\x87\x43\x0e\x47\x1c\x8e\x39\x9c\x60\x58\x63\x6f\x8d\xbd\x35\xf6\xd6\xd8\x5b\x63\x6f\x8d\xbd\x35\xf6\xd6\xd8\x5b\x63\x6f\x8d\xbd\x35\xf6\xd6\xd8\x5b\x63\x6f\x8d\xbd\x35\xf6\xd6\x4e\xde\x2a\xb4\xfa\x12\x2f\x43\x15\xd7\x67\xc3\xf8\xed\xd7\x65\x1b\xd6\x86\xe1\xbb\xaf\xcb\xfb\x36\xae\x0f\xe3\x8b\x9b\x36\x6a\xbc\xcf\x7d\x27\x54\x82\x79\x58\x83\xc3\x0c\xbf\xfa\x57\xdd\x63\xd8\x5e\x67\x7b\x9d\xed\x75\xb6\xd7\xd9\x5e\x67\x7b\x9d\xed\x75\xb6\xd7\xd9\x5e\x67\x7b\x9d\xe7\xba\xc1\x73\xdd\xe0\xb9\x6e\xf0\x5c\x37\x78\xae\x1b\x3c\xd7\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x60\x6f\x83\xbd\x0d\xf6\x36\xd8\xdb\x78\xef\x2d\xd4\x6c\x34\xdf\x83\x77\x71\x16\x37\x59\xdc\x64\x71\x93\xc5\x4d\x16\x37\x59\xdc\x64\x71\x93\xc5\x4d\x16\x37\x59\xdc\x64\x71\x93\xc5\x4d\x16\x37\x59\xdc\xe4\x19\x6e\xf1\x0c\xb7\xd8\xdb\x62\x6f\x8b\xbd\x2d\xf6\xb6\xd8\xdb\x62\x6f\x8b\xbd\x2d\xf6\xb6\xd8\xdb\x62\x6f\x8b\xbd\x2d\xf6\xb6\xd8\xdb\x62\x6f\x8b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x6d\xf6\xb6\xd9\xdb\x66\x6f\x9b\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x1d\xf6\x76\xd8\xdb\x61\x6f\x87\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x5d\xf6\x76\xd9\xdb\x65\x6f\x97\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x3d\xf6\xf6\xd8\xdb\x63\x6f\x8f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x7d\xf6\xf6\xd9\xdb\x67\x6f\x9f\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x03\xf6\x0e\xd8\x3b\x60\xef\x80\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x43\xf6\x0e\xd9\x3b\x64\xef\x90\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x23\xf6\x8e\xd8\x3b\x62\xef\x88\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x63\xf6\x8e\xd9\x3b\x66\xef\x98\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x84\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x84\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x84\xbd\x13\xf6\x4e\xd8\x3b\x61\xef\x24\x39\xbd\x51\x9e\x17\x8d\xac\xaa\xfd\x73\x73\xf1\x6e\xf9\xfc\x94\x52\x8b\xac\x92\xa2\x28\x1b\xb1\xde\x57\x95\x2c\x9a\xdd\x9b\xc8\x9f\x9e\x77\xf2\x49\x16\x8d\xdc\x4c\xc6\xc7\x77\xe2\x8f\x4f\x5a\xdc\xb4\x6f\x00\x5e\xbc\xbf\x7e\x88\x6a\x18\xd5\x31\x6a\x60\xd4\xc4\xa8\x85\x51\x1b\xa3\x0e\x46\x5d\x8c\x7a\x18\xf5\x31\x1a\x60\x34\xc4\x68\x84\xd1\x18\xa3\x09\x45\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x35\xf4\xd5\xd0\x57\x43\x5f\x0d\x7d\x75\xf4\xd5\xd1\x57\x47\x5f\xfd\x9d\xaf\x10\xdd\x5b\xe7\x98\x1b\x85\x75\x14\xd6\x51\x58\x47\x61\x1d\x85\x75\x14\xd6\x51\x58\x47\x61\x1d\x85\x75\x14\xd6\x51\xd8\x40\x61\x03\x85\x0d\x14\x36\x70\x06\x1b\xe8\x6b\xa0\xaf\x81\xbe\x06\xfa\x1a\xe8\x6b\xa0\xaf\x81\xbe\x06\xfa\x1a\xe8\x6b\xa0\xaf\x81\xbe\x06\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x9a\xe8\x6b\xa2\xaf\x89\xbe\x26\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\x5a\xe8\x6b\xa1\xaf\x85\xbe\x16\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\xda\xe8\x6b\xa3\xaf\x8d\xbe\x36\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\x3a\xe8\xeb\xa0\xaf\x83\xbe\x0e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\xba\xe8\xeb\xa2\xaf\x8b\xbe\x2e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\x7a\xe8\xeb\xa1\xaf\x87\xbe\x1e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\xfa\xe8\xeb\xa3\xaf\x8f\xbe\x3e\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x06\xe8\x1b\xa0\x6f\x80\xbe\x01\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x86\xe8\x1b\xa2\x6f\x88\xbe\x21\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\x46\xe8\x1b\xa1\x6f\x84\xbe\x11\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\xc6\xe8\x1b\xa3\x6f\x8c\xbe\x31\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\x09\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\x09\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\x09\xfa\x26\xe8\x9b\xa0\x6f\x82\xbe\xdd\x9b\xca\x93\xf1\x7c\x3e\x17\xb7\xf7\xab\xfb\xa5\x9f\x2e\xc5\x27\x51\x3e\xcb\x2a\x6b\xf2\xe2\x9b\xa8\xdf\xea\x46\x3e\x09\x59\x34\xd5\x9b\x78\x2e\xf3\xa2\x11\x3f\x67\xbb\xd7\xec\xad\x16\x75\x93\x55\x4d\x2d\xb2\x46\xfc\x98\xe9\xb3\xd9\x2f\x93\xf1\xa1\x86\xc9\x78\x34\x9f\x8b\x5a\x36\xe2\xfa\x2e\x9d\x8c\x47\x57\x91\x48\x67\x53\xf5\xcf\x6a\x71\xb3\x50\xc9\xf7\xcb\x45\x1b\xba\xbd\x5f\xb5\x59\x4e\x25\x9a\xfc\x49\x56\xdd\xdb\xd8\x2f\xd9\xee\x54\x78\xb9\xb8\x86\xc2\xcb\xeb\xc5\xb1\xb0\x6a\x8e\xa8\xf6\x45\xa1\xda\xbd\xaf\x65\x25\xd6\xe5\x46\x8a\x9f\xd7\x3b\x99\x55\xe2\xae\xca\x5f\xf2\x9d\xfc\x26\xc5\x43\xde\x88\xd7\xff\x12\x7f\xbb\xbe\xfb\xa5\xaf\xde\x99\x8a\xaf\xf7\x71\xba\x0a\x6f\xa3\x78\xe5\x47\x91\x6a\xf3\xdf\xae\xef\x46\xa9\xa3\x2a\xbf\xbd\x5f\xfd\x16\xdc\xa7\x3d\xde\x8f\x24\x9e\xcd\x46\xa3\xb9\xf8\x2e\xdf\x1e\xca\xac\xda\xa8\x07\x37\xfb\x5a\x54\xf2\x5b\x5e\x37\xb2\xea\x0b\x44\xe7\x05\xf4\x41\x81\x4d\xd6\x64\xc3\xec\xd1\xa0\x7a\x53\xe5\xde\xe4\xf5\xf3\x2e\x7b\xc3\xda\xa3\x41\xe5\xf6\x79\xf6\xf7\x75\x2f\xcf\xf3\xba\x2a\x6f\x47\x3c\xcc\x74\xbd\x38\x7c\x12\xa0\xb2\xf9\xe2\xfc\x6f\x7e\x31\x28\xc3\xa2\xd7\x77\x67\x0f\xd0\xda\x9e\x3e\xc9\xa7\x52\x4d\x97\xaa\x6c\xe4\xba\xc9\xcb\x62\x58\xe2\xef\xe1\x79\x89\xb6\xb7\x2f\xf9\x46\x96\x62\x5d\x16\x4d\x55\x5e\xd6\x7f\x96\x3b\x49\xe2\xb6\xfe\x6c\xbd\xcd\x0b\x09\xf9\xbb\x39\xe8\xff\x3d\x5e\xa5\xb3\xfe\xe3\x8d\xe0\xea\xb7\xdf\x85\x76\x96\xa0\x7d\x94\xa0\x7f\x94\x60\x7c\x94\x60\x7e\x94\x60\x7d\x94\x60\x7f\x94\xe0\xbc\x4f\xb8\xfd\xba\x3c\x35\xf9\x3c\x61\x71\x73\x56\xe8\x98\x20\x2e\xfe\x46\x93\xf1\xb5\x7f\xff\xdb\xea\xd7\x85\x18\x7e\xd6\xf3\xc3\x49\xd4\xba\xbf\xba\xfd\x7d\xe5\xae\x82\xc5\xf2\x7e\x90\x38\x9b\xa9\xc4\xc3\x72\x1b\x96\xfc\xc9\x9c\x4d\xc6\xf3\xc3\x3a\x3e\x1b\x96\x64\x34\xef\x97\x5c\x56\x88\x6c\xbd\x96\x75\x2d\xe4\x8b\xac\xde\x9a\x6d\x5e\x7c\x9b\x8c\x2f\x8b\xcc\x92\xc4\x85\x22\x3f\x8c\xd9\x6c\x26\x9a\x52\xfc\x78\x78\x7c\x7c\x9c\x8c\x87\xab\xf2\x50\x58\x65\x3a\x16\x56\x4b\xfc\x6c\x27\x32\xfa\x1f\x94\x9c\xbe\xe3\xae\xb6\xb6\x2f\xf1\x32\x14\x9f\x44\x2a\xb3\x8d\xc8\x44\x9d\x17\xdf\x76\x52\xac\xb7\x59\x95\xad\x1b\x59\x89\xf2\x51\xe4\xc5\xf3\xbe\x11\x8f\x55\xf9\x74\xb6\x4e\xe5\x4b\xbe\x6e\x3f\x6c\x2b\x45\x3a\x9b\x8c\x97\x87\x2f\xe9\xb7\xdb\x46\xbb\x07\x1d\xf6\x86\xd1\x5c\xbc\x66\x79\x23\x1e\xcb\x4a\x64\xaa\x86\xba\xa9\xca\xef\x72\x32\x1e\x05\xe9\x3f\x9f\xc5\x47\x25\xa3\xb6\x64\xa5\x9a\x95\x37\x22\x2b\x36\xa2\x92\xcd\xbe\x2a\x26\xe3\x51\x1a\x2f\xdf\xf7\xe3\xf6\xab\xda\x9d\x7f\xaf\xf2\x46\xb6\x9f\x03\x9e\xba\x90\x17\x22\x6d\xe5\xda\x70\x59\xd4\xe5\x4e\x7e\xee\x9b\x7c\xfb\xb5\xdb\x35\x45\xaa\x4d\x87\xd3\x6a\x34\x17\x75\xf6\x22\x45\xaa\x9d\xb2\xae\x7e\xf7\xdb\x5d\xb6\x6d\x67\x5b\x20\xba\xe8\xa0\x7a\xc4\x61\xbf\x69\x4a\xf1\x20\xdb\x1e\xbc\x0d\x3a\x7b\x56\x51\xbf\x5d\xf7\xfb\x96\xaa\x08\xda\x3f\xe8\xbb\xda\x93\xa1\xa9\x95\xac\x9b\xb2\xea\x5a\x7b\xe9\x33\x74\xba\xfb\xba\xbc\x3f\x42\x65\xe2\xe6\xeb\xd5\xa7\x46\x56\x4f\x79\x91\x35\x52\x6d\xd8\x95\x3a\x22\xca\xc7\xd3\xf3\xeb\x0b\xba\x69\x57\x4f\x3b\xb1\x54\xde\x76\x62\xa8\xf4\x6c\xb3\xa9\xd4\x4c\x6d\xbd\x3f\x8f\x7a\x36\xf5\xbc\x9e\xb8\xed\x68\xbf\x03\x1d\x79\x67\x53\xd5\xa1\xb6\x93\xea\x4c\x39\x8d\x45\xdf\xb9\x3e\xe4\x9c\x42\x2a\x97\x1f\xb5\x0e\xe9\x6c\xfa\x53\x7b\xe2\x3c\x95\x2f\xf2\xd0\xf8\xf6\x28\x96\x95\xf8\x39\x9d\xfd\xd2\xcf\x50\x4d\x79\x1c\x9b\xb3\xba\xba\xbd\xbd\x6b\x2d\x53\xf5\xfc\x54\xeb\x2b\xe9\xf0\xcf\x3a\x9e\x17\x87\x3a\xf7\x6a\x61\x88\x6e\xb6\x04\xe9\x3f\x4f\xbf\x1b\x59\x45\xb7\x37\xea\xfa\xd0\x25\x1d\x9a\xa5\x4d\x7f\xd2\xda\x9c\xc5\x61\xd0\xcf\x9e\x7b\xde\x92\xbe\x74\x77\x90\x0f\x74\x8e\x23\x7a\x09\x74\x9c\x01\x27\xa0\xee\xa0\x1e\x00\xf5\x73\x40\x8d\xd4\xe2\x46\x7c\x52\x07\xce\xd3\x73\xd3\x8e\x53\xbb\x39\x74\xab\xf1\xdd\x72\x6f\xd7\xfa\x54\xbc\x6e\xf3\xf5\x56\xe4\xea\x22\x53\x56\x72\xd3\xd5\xd3\xad\x23\xd5\x8e\x6c\x57\x97\x42\xae\xb7\xa5\xdc\x5c\xae\xab\xd3\x64\x5b\x76\x3f\xb8\x39\x1f\xbf\xd3\xe6\x7c\x1c\x7e\x47\xfc\x5c\x94\xa2\x90\x5d\x4d\xc7\x29\x51\xe7\xc5\x5a\x8a\x57\x29\x26\xe3\xd1\x48\x8d\x8d\x10\xa2\x7c\x91\x55\x37\x44\xbb\xac\x3d\xd1\x46\x57\xb1\xaf\x72\xf7\x4f\x5a\x5d\xdf\x7f\x19\xcd\x0f\x3d\x55\x1d\x6c\x7b\x33\x19\x8f\xfa\x39\xd8\xfe\x88\xe8\xb8\xab\x64\xa7\x6e\x77\xe3\xd7\x26\xa9\x5e\x89\x87\x6c\xfd\x5d\x35\xe7\xa9\x2c\xf2\xa6\xac\xfe\xc5\xf4\x1d\xac\x54\x35\x01\x6e\xda\x91\x3c\xce\xcb\xd7\x7e\x99\xed\xf2\x42\x3e\x4a\xb9\x99\x8a\xa6\x2c\x0f\x13\xa5\xcb\xd7\x7e\xe6\xdd\x4d\x9f\x7f\x31\x0d\x2e\x1f\x74\x1c\xf2\x81\xe9\x71\xd2\xf4\x53\xe0\x72\x0b\x38\xdc\x59\xb6\x79\x2d\x36\xa5\xac\x8b\xbf\x36\xe2\xb5\xac\xbe\x4f\xc5\x83\x5c\x67\xfb\x5a\x9e\xae\xbc\xdd\x8f\xa2\xfe\xad\x8d\x62\x2a\x9e\xb3\xf5\x77\xb9\x11\xba\x78\x56\x8d\x54\xd5\xf4\xf7\x9d\x5d\xb9\xce\xd4\x6d\x67\x7a\xb9\x99\xfc\xe1\x3e\x72\xb6\x5a\xd4\x9a\x9d\x8b\x9b\xdb\x65\xfc\xdf\x62\xa9\xba\xd0\x54\xd9\xb3\x78\xcd\x77\x3b\x21\x8b\x8d\x78\xdd\xca\x42\x9d\x15\xb5\x94\xb5\xc8\x8a\x37\xd5\xe4\xa9\x3a\x6a\x0b\x91\x17\x6d\xd1\xbe\x79\x8f\x65\xf5\x34\x15\x1b\x59\x3f\x1f\x36\xdb\xbb\xff\xbc\x13\xb5\x5c\x97\xc5\x46\xc8\x4d\xae\x1a\xfa\x57\x75\xaf\xfc\xc7\x3e\xaf\xda\x2f\x85\xb4\xa5\xcb\x47\x91\x89\x4d\xb9\x7f\xd8\x49\x55\xf5\xe7\xf6\x76\xfd\x47\xfb\x5a\xaa\x4f\x45\x6a\xfc\xf1\xfe\xa6\x9f\x42\x7a\x1f\x32\x4e\x21\xe3\x4f\xd8\x05\xef\x06\xdb\xa0\x7e\xda\x06\xdb\xd5\xa1\x54\x0a\xf9\xa3\x11\xcd\x6b\x79\x36\xc4\xc7\x49\x7a\xba\x21\x75\xd7\x0d\xf1\x94\xd5\xed\x9a\xf9\x26\x1b\xb1\x2b\x5f\xc5\xc3\x5b\x23\x07\x0b\x22\x6d\xef\xbf\xf9\xe3\x31\x55\xed\x2f\xed\x10\xfd\x63\x9f\x37\xe2\xb9\xca\x8b\xa6\xbd\x10\x0d\x37\xd8\xbb\xb3\x1d\xb6\x5d\xa1\x65\xb3\x95\xd5\x6b\x5e\xcb\xae\x48\xdb\xd2\xd3\x03\x61\x0d\xd6\xdb\xfc\xb1\x11\xdb\xfc\xdb\xb6\x7f\xec\xe1\xd2\xd2\xf9\x19\x6d\x4e\x77\x20\x73\x3c\x22\x4e\xeb\x34\x3d\xab\x2b\x9d\x89\x9d\x7c\x6c\x0e\xe9\xfa\x34\xd5\xcf\x47\xe0\xfa\x3e\xe8\x66\x73\xaa\x9f\x3d\xec\x74\x01\xe8\x9e\x71\x7d\x1f\xac\x66\x17\x5b\xc1\xa0\x11\x83\x0c\xed\x33\x3a\xc2\xbe\x0d\xfa\xa0\x0d\xc6\x34\x35\xa6\x3f\x7d\xea\x4e\x9d\xc1\x73\x4e\xc7\xce\xf9\xa3\x66\xfd\x60\x9c\xb1\xfc\x49\xa3\x71\x76\x24\xaa\x02\x6a\x21\x7c\x97\xf2\x59\x7c\x2b\x0f\xf5\x17\x43\x98\x77\xa7\xe4\xdd\xbf\x71\x4c\xbe\x5b\x6f\x1f\x1c\x97\x17\xeb\xed\x2a\x7a\xb7\xde\x3e\x3e\x54\x87\x17\xaa\x5f\xfd\x2b\x75\xf3\x6c\xf7\xa2\x6d\x56\x6c\x76\xfd\xe9\xba\xcd\x76\xed\xbe\xd6\xbf\x22\xeb\xfb\xd3\xfe\x94\x74\x70\xd5\x55\x2f\xe2\x46\xc7\x86\x5e\xbe\x2c\x51\xdb\x75\xf7\x2a\xbd\xda\x17\xed\xeb\xf3\xbc\x10\xd7\x61\x3a\x5c\x5a\xda\xe0\x2e\xd9\xd6\x38\x6f\x1b\xf0\x1f\x47\xe0\xc3\x1b\x10\xa3\x1e\x2d\xab\x9a\x53\xd3\x2e\xfb\x14\xf4\x5f\xae\x13\x9f\xba\x57\x11\x4d\x29\xe4\x0f\xb9\xde\x37\xb2\xed\xda\xbe\xd8\xc8\xc7\xbc\x50\x67\x76\x95\x3d\x4f\xc6\x87\xec\xc3\xd1\x6c\xbb\xaa\x8e\xd4\xbe\xa4\xfa\xff\x74\xbe\xf4\xef\xb4\xfc\xe1\x13\x8e\xdf\xda\xfb\x2c\x96\x5b\x59\x49\xf1\x5a\xaa\x53\xab\xab\x24\x5b\x37\xfb\x6c\xb7\x7b\x53\x17\x6d\xb5\xe3\x9f\xbe\xe2\x37\x15\x75\xd9\x9d\x73\xed\xf9\x50\xa8\x57\x5c\xa7\xec\x6a\x93\x5a\x67\xbb\x9d\xdc\x7c\xee\x5a\xbf\xb8\x59\x8e\x46\xe9\x72\x71\x9c\x77\xfd\x75\xe2\xf3\xfd\x32\x5d\xdc\x7c\xf9\x5f\xf1\x97\xff\x2b\x16\xed\xeb\xa0\xb3\x6b\xc3\xff\x88\xbf\x4c\xc6\xff\x1f\x00\x00\xff\xff\x3e\xd2\x33\x97\xb6\x3f\x00\x00")

func lc3osAsmBytes() ([]byte, error) {
	return bindataRead(
		_lc3osAsm,
		"lc3os.asm",
	)
}

func lc3osAsm() (*asset, error) {
	bytes, err := lc3osAsmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lc3os.asm", size: 16310, mode: os.FileMode(438), modTime: time.Unix(1528900991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lc3os.asm": lc3osAsm,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lc3os.asm": &bintree{lc3osAsm, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

